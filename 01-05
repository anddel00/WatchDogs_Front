<!DOCTYPE html>
<html lang="it-IT">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Ricerca</title>
    <style>
        /* Stili CSS per la barra di ricerca e il menu select */
        body {
            width: auto;
            height:auto;
            background-color: rgba(255, 131, 0, 0.89);
            padding: 20px;

        }
        .credits{
            position: absolute;
            text-align: right;
            font-size: 22px;
            font-family: "Nanum Myeongjo",serif;
            margin-bottom: 100px;
            margin-top: 4500px;
            left: 50%;

          .no-result{
    font-family: "Nanum Myeongjo",sans-serif;
    font-size: 16px;
    color: white;
    text-shadow: 1px 1px 1px rgba(0, 0, 0, 0.3);
          }


        }
        .container {
            margin-top: 10px;
            background-color: rgba(255, 131, 0, 0.89);
            background: linear-gradient(to bottom, rgba(255, 255, 255, 0), rgba(234, 168, 108, 0.53) 98%);
            width: 1150px;
            border: none;
            border-radius: 30px;
            padding: 20px 20px 20px 20px;
            box-shadow: 0 1px rgba(0, 0, 0, 0.5);
            text-align: left;
            position: absolute;
            margin-left: 120px;


        }

        /FONT---FONT---FONT/
        .nanum-myeongjo-regular {
            font-family: "Nanum Myeongjo", serif;
            font-weight: 400;
            font-style: normal;
        }


        .header-text {
            text-align: center; /* Allinea con il margine sinistro della barra di ricerca */
            margin-bottom: 2px; /* Spazio inferiore */
            margin-top: 100px;
            font-size: 46px;
            text-shadow: 1px 1px 1px rgba(0, 0, 0, 0.53);
            font-family: "Nanum Myeongjo", sans-serif;
            color: white;
        }

        .nav {
            background-color:transparent ;
            border-radius: none;
            padding: 15px 20px;
            position: absolute;
            margin-top: 2px;
            right: 1px;
            transform: translate(-50%, -50%);
            width: 500px;
            left: 950px;
            font-size: 20px;
            font-family: "Nanum Myeongjo", serif;
            font-palette: white;
            border: none ;
            border-color: #919090;
            box-shadow: none;

        }

        .nav ul {
            list-style-type: none;
            margin: 0;
            padding: 0;
            text-align: center;
            color: white;
        }

        .nav li {
            display: inline-block;
            margin-right: 2px;
            position: relative;
            color: white;
        }

        .nav a {
            text-decoration: none;
            color: black;
            margin: 0;
            border-radius: 0;
            padding: 5px 5px;
            color: black;
            text-shadow: 1px 1px 1px rgba(0, 0, 0, 0.53);

        }

        .nav a:hover {
            background-color: white;
            text-decoration: none;
            text-shadow: 1px 1px 1px rgba(0, 0, 0, 0.53);
        }

        .search-container {
            margin-top: 70px; /* Aggiunto margine superiore per spazio */
            text-align: center;
            margin-bottom: 50px;
        }

        .search-box {
            font-family: "Nanum Myeongjo", sans-serif;
            padding: 8px;
            width: 400px;
            border: 1px solid;
            border-right: none;
            border-radius: 30px 0 0 30px; /* Arrotondamento solo per gli angoli sinistri */
            font-size: 16px;
            margin-left: 30px;
            margin-right: 0;
            margin-top: 2px;
            border-color: #919090;
            box-shadow: inset 0 0 5px rgba(0, 0, 0, 0.2);
        }
        .search-box:focus {
            /* Assottigliare il bordo blu quando la barra di ricerca ha il focus */
            outline: 1px solid #578aec;
        }


        .search-button {
            padding: 8px 16px;
            color:white ;
            background-color: #578aec;
            border: 1px solid #919090;
            border-left: none;
            border-radius: 0 30px 30px 0;
            cursor: pointer;
            font-size: 16px;
            margin-left: -6px;
        }

        .search-button:hover {
            background-color: #5775be;
            box-shadow: inset 0 0 5px rgba(0, 0, 0, 0.2);
        }

        /*menu a tendina */
        .dropdown-nav {
            position: absolute;
            background-color: rgba(255, 255, 255, 0.8); /* trasparente */
            box-shadow: 0 2px rgba(0, 0, 0, 0.5);
            border: none;
            border-color:#919090 ;
            border-radius: 30px;
            padding: 5px 10px;
            height: auto;
            overflow-y: auto;
            margin-bottom: 10px;
            z-index: 1000;
            width: 150px;
            left: 185px;
            top: calc(100% + 3px); /* Posiziona il menu a tendina sotto il menu di navigazione */
        }
        .dropdown-nav a {
            color: black;
            border-radius: 30px;
            padding: 5px 10px;
            display: block;
        }

        .dropdown-nav a:hover {
            background-color: #ffffff; /* Sfondo bianco al passaggio */
            text-decoration: none;
            text-shadow: 1px 1px 1px rgba(0, 0, 0, 0.53);
        }
        .container-two{
            margin-right: 60px;
            margin-top: 40px;
            left: 0px;
            margin-bottom: 50px;
            background-color: rgba(255, 131, 0, 0.89);
            background: linear-gradient(to top, rgba(255, 255, 255, 0), rgba(234, 168, 108, 0.53) 98%);
            width: 1150px;
            height: auto;
            border: none;
            border-radius: 30px;
            padding: 20px 20px 20px 20px;
            box-shadow: 1px 0 rgba(0, 0, 0, 0.5);
            text-align: left;
            position: absolute;
            z-index: -1;
        }
        .homepage-title{
            font-size: 52px;
            text-shadow: 1px 1px 1px rgba(0, 0, 0, 0.53);
            font-family: "Nanum Myeongjo", sans-serif;
            text-align: center;
            position: relative;
            margin-top: 50px;
            color: white;

        }
        .post-container{
            border-radius: 20px;
            background-color: white;
            width: 95%;
            height: auto;
            max-height: 200px;
            margin-top: 30px;
            margin-bottom: 30px;
            padding: 30px;
            margin-right: 20px;
            font-family: "Nanum Myeongjo", serif;
        }

        .dropdown-menu {
            position: absolute;
            border: none;
            margin-top: -1px;
            width: 460px;
            margin-left: 360px;
        }
        .dropdown-menu ul {
            list-style-type: none;
            padding: 0;
            margin-top: 0;
            height: auto;
            overflow-y: auto;
            border: none;
            border-radius: 30px;
            background-color: rgba(255, 255, 255, 0.8);
            box-shadow: 0 0 rgba(0, 0, 0, 0.5);
        }
        .dropdown-menu li {
            font-family: "Nanum Myeongjo", sans-serif;
            text-align: left;
            padding: 10px;
            cursor: pointer;
            transition: background-color 0.3s ease;
        }
        .dropdown-menu li:hover {
            background-color: white;
        }
    </style>

    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Nanum+Myeongjo&display=swap" rel="stylesheet">

</head>

<body>
<div id="app" class="container">
    <div class="nav">
        <ul>
            <a href="#" @click="toggleDropdown('Filtri')"><b>Filtri</b></a>
        </ul>
        <div id="dropdown" class="dropdown-nav"></div>
    </div>

    <p class="header-text"><b>Event Network</b></p>
    <!--<template> -->
    <div class="search-container">
        <form @submit.prevent="searchEvents">
            <input type="text" v-model="input" @input="filterItems" @keyup.enter="handleSearch" class="search-box" name="q" placeholder="Cerca evento...">
            <button @click="handleSearch" class="search-button">Vai</button>
        </form>

        <div class="dropdown-menu" v-if="suggestions.length > 0">
            <ul>
                <li v-for="suggestion in suggestions" :key="suggestion" @click="selectSuggestion(suggestion)">
                    {{ suggestion }}
                </li>
            </ul>
        </div>
    </div>


    <div class="container-two"><h1 class="homepage-title"><b>H o m e p a g e</b></h1>

        <div class="post-container" v-show="springBootData.length === 0 && filteredItems.length > 0">
            <h3>Risultati per: "{{ input }}"</h3>
            <ul>
                <li v-for="filter in filteredItems" :key="filter.id">
                    <h4>{{ filter.tipologia }}</h4>
                    <!--<p><strong>Url:</strong> {{ filter.url_image }}</p>-->
                    <p><strong>Nome evento:</strong> {{ filter.eventname }}</p>
                    <p><strong>Organizzatore:</strong> {{ filter.organizzatore }}</p>
                    <!--<p><strong>Sponsor:</strong> {{ filter.sponsor }}</p>-->
                    <p><strong>Luogo:</strong> {{ filter.luogo }}</p>
                    <p><strong>Data:</strong> {{ filter.data }}</p>
                    <p><strong>Descrizione:</strong> {{ filter.descrizione }}</p>
                </li>
            </ul>
        </div>
        <div class="spring-boot-data-container" v-show="springBootData.length > 0">
            <ul>
                <li v-for="spring in springBootData" :key="spring.id">
                    <h4>{{ spring.tipologia }}</h4>
                    <!--<p><strong>Url:</strong> {{ spring.url_image }}</p>-->
                    <p><strong>Nome evento:</strong> {{ spring.eventname }}</p>
                    <p><strong>Organizzatore:</strong> {{ spring.organizzatore }}</p>
                    <!--<p><strong>Sponsor:</strong> {{ spring.sponsor }}</p>-->
                    <p><strong>Luogo:</strong> {{ spring.luogo }}</p>
                    <p><strong>Data:</strong> {{ spring.data }}</p>
                    <p><strong>Descrizione:</strong> {{ spring.descrizione }}</p>
                </li>
            </ul>
        </div>
    </div>
    <!--<template> -->
</div>

<p class="credits"><i>Watchdogs</i></p>

<script>
    // Funzione per mostrare/nascondere il menu a tendina
    function toggleDropdown(categoria) {
        var dropdown = document.getElementById('dropdown');
        if (dropdown.style.display === 'none' || dropdown.getAttribute('data-category') !== categoria) {
            dropdown.innerHTML = getCategoryItems(categoria);
            dropdown.style.display = 'block';
            dropdown.setAttribute('data-category', categoria);
        } else {
            dropdown.style.display = 'none';
        }
    }

    // Funzione per ottenere gli elementi del menu a tendina in base alla categoria selezionata
    function getCategoryItems(categoria) {
    switch (categoria) {
        case 'Filtri':
            return `
                <a href="#" onclick="sendRequestToSpringBoot('Sport')">Sport</a><hr>
                <a href="#" onclick="sendRequestToSpringBoot('Cinema')">Cinema</a><hr>
                <a href="#" onclick="sendRequestToSpringBoot('Musica')">Musica</a><hr>
                <a href="#" onclick="sendRequestToSpringBoot('Teatro')">Teatro</a><hr>
            `;
        default:
            return '';
    }
}
</script>
<script src="https://cdn.jsdelivr.net/npm/vue@2"></script>
<script src="https://unpkg.com/axios/dist/axios.min.js"></script>
<script>

    new Vue({
        el: '#app',

        data: {
            input: '',
            filteredItems: [],
            suggestions: [], //array per memorizzare i suggerimenti
            springBootData: [] //array per memorizzare i dati da Spring Boot
        },

        methods: {
            sendRequestToSpringBoot(categoria) {
                const params = new URLSearchParams();
                params.append('categoria', categoria);

                axios.put('http://localhost:8080/api/', params)
                    .then(response => {
                        // Aggiorna l'array con i dati ricevuti da Spring Boot
                        this.springBootData = response.data;
                    })
                    .catch(error => {
                        console.error('Errore durante l\'invio della richiesta:', error);
                    });
            },

            selectSuggestion(suggestion) {
                // Assegna il suggerimento selezionato alla variabile 'input'
                this.input = suggestion;
                // Nascondo i suggerimenti
                this.suggestion = [];
                // Chiama la funzione 'searchEvents' per avviare la ricerca
                this.searchEvents();
            },

            filterItems() {
                if (this.input.trim() === '') {
                    this.suggestions = [];
                } else {
                    const word = this.input.trim();
                    axios.get('http://localhost:8080/search?word=' + word)
                        .then(response => {
                            this.suggestions = response.data;
                        })
                        .catch(error => {
                            console.error('Errore durante il recupero dei suggerimenti:',error);
                        });
                }
            },

            searchEvents() {
                const word = this.input.trim();
                // Effettua la chiamata API al backend Spring Boot
                axios.get('http://localhost:8080/suggestion?word=' + word)
                    .then(response => {
                        // Aggiorna l'array di risultati filtrati con i dati ricevuti dal backend
                        this.filteredItems = response.data;
                    })
                    .catch(error => {
                        console.error('Errore durante la ricerca degli eventi:', error);
                    });
            },

            handleSearch() {
                // Nasconde i suggerimenti quando viene effettuata la ricerca
                this.suggestions = [];
                // Avvia la ricerca
                this.searchEvents();
            }

        }

    });
</script>

</body>
</html>
