<!DOCTYPE html>
<html lang="it-IT">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Ricerca</title>
    <style>
        /* Media query per dispositivi mobili */
        /* Media query for screens smaller than 425px */
        @media only screen and (max-width: 425px) {
            body {
                padding: 20px;
                max-width: 800px;
                text-align: center;
                -moz-box-align: center;
                justify-content: center;
            }

            .container, .container-two {
                width: 280px;
                padding: 20px;
                margin-right: 150px;
            }

            .search-container {
                margin-top: 30px;
            }

            .search-box {
                width: calc(100% - 60px);
                margin-right: 10px;
            }

            .search-button {
                width: 50px;
            }

            .menu-filtri {
                width: 100%;
                left: 0;
                margin-right: 0;
            }

            .menu-filtri li {
                padding: 10px 15px;
            }

            .menu-filtri-secondario {
                left: 100%;
                top: 0;
            }

            .post-container {
                width: 100%;
                padding: 20px;
            }

            .homepage-title {
                font-size: 32px;
            }
        }

        /* Stili CSS */
        body {
            width: 100%;
            height:auto;
            background-color: rgba(255, 131, 0, 0.89);
            padding: 40px;

        }



        .credits {
            position: absolute;
            text-align: right;
            font-size: 22px;
            font-family: "Nanum Myeongjo", serif;
            margin-bottom: 100px;
            top: 4500px;
            left: 50%;
        }

        #toggleFilterBtn {
            /* Impostazioni per il pulsante di filtro */
            background-color: #ffffff;
            border:none;
            padding: 10px 20px;
            border-radius: 10px;
            cursor: pointer;
            position: absolute;
            top:1px;
            left:975px;
            font-family: "Nanum Myeongjo", sans-serif;
            text-shadow: 1px 1px 1px rgba(0, 0, 0, 0.3);
            box-shadow: -3px 0 5px rgba(0, 0, 0, 0.1);
            font-size: 16px;
        }

        .menu-filtri{
            /* Impostazioni per il menu dei filtri */
            position: absolute;
            left:970px;
            width:auto;
            background-color: white;
            height: auto;
            display: none;
            text-decoration: none;
            margin-left: 5px;
            border-radius: 10px;
            box-shadow: -3px 0 5px rgba(0, 0, 0, 0.1);
            font-family: "Nanum Myeongjo", serif;
            text-shadow: 1px 1px 1px rgba(0, 0, 0, 0.53);
            top:40px;
        }
        .menu-filtri ul{
            list-style-type: none;
            margin-left: 3px;
            text-align: left;
            padding: 5px;
            border-radius: 10px;
        }
        .menu-filtri li{
            display: block;
            margin: 1px;
            padding: 10px;
            text-align: left;
            border-radius: 10px;
            z-index: 2;
            position: relative;
        }
        .menu-filtri li:hover{
            background-color: lightgrey;
            cursor: pointer;
        }

        .menu-filtri-secondario{
            /* Impostazioni per il menu a tendina dei filtri secondario */
            position: absolute;
            right: -100px;
            left: 100%;
            top: 0;
            width:auto;
            background-color: white;
            height: auto;
            display: none;
            text-decoration: none;
            margin-left: 10px;
            min-width: max-content;
            border-top-right-radius: 10px;
            border-bottom-right-radius: 10px;
            box-shadow: 3px 0 5px rgba(0, 0, 0, 0.1);
            font-family: "Nanum Myeongjo", serif;
            text-shadow: 1px 1px 1px rgba(0, 0, 0, 0.53);
        }

        .menu-filtri-secondario ul{
            list-style-type: none;
            margin-left: 3px;
            text-align: left;
            padding: 5px;
            border-radius: 10px;
        }
        .menu-filtri-secondario li{
            display: block;
            margin: 1px;
            padding: 10px;
            text-align: left;
            border-radius: 10px;
        }
        .menu-filtri-secondario li:hover{
            /* Impostazioni quando il puntatore si trova sopra un elemento del sotto-menu dei filtri */
            background-color: lightgrey;
            cursor: pointer;
        }
        .menu-filtri li:hover .menu-filtri-secondario {
            /* Impostazioni per mostrare il sotto-menu quando il puntatore si trova sopra un elemento del menu principale */
            display: block;
            position: absolute;
            left: 87%;
            top:0;
        }
        .show-menu{
            /* Impostazioni per mostrare il menu principale dei filtri */
            display: block;
        }
        .toggleFilterBtn:hover {
            /* Impostazioni quando il puntatore si trova sopra il pulsante di apertura/chiusura del menu dei filtri */
            background-color: #f0f0f0;
        }

        .container {
            /* Impostazioni per il contenitore principale */
            margin-top: 10px;
            background-color: rgba(255, 131, 0, 0.89);
            background: linear-gradient(to bottom, rgba(255, 255, 255, 0), rgba(234, 168, 108, 0.53) 98%);
            width: 1150px;
            border: none;
            border-radius: 30px;
            padding: 20px 20px 20px 20px;
            box-shadow: 0 1px rgba(0, 0, 0, 0.5);
            text-align: left;
            position: absolute;
            left: 130px;
        }

        /FONT---FONT---FONT/
        .nanum-myeongjo-regular {
            font-family: "Nanum Myeongjo", serif;
            font-weight: 400;
            font-style: normal;
        }

        .header-text {
            text-align: center; /* Allinea con il margine sinistro della barra di ricerca */
            margin-bottom: 2px; /* Spazio inferiore */
            margin-top: 100px;
            margin-left: 20px;
            font-size: 62px;
            text-shadow: 1px 1px 1px rgba(0, 0, 0, 0.53);
            font-family: "Nanum Myeongjo", sans-serif;
            color: white;
        }

        .search-container {
            margin-top: 70px; /* Aggiunto margine superiore per spazio */
            text-align: center;
            margin-bottom: 50px;
        }

        .search-box {
            font-family: "Nanum Myeongjo", sans-serif;
            padding: 8px;
            width: 400px;
            border: 1px solid;
            border-right: none;
            border-radius: 30px 0 0 30px; /* Arrotondamento solo per gli angoli sinistri */
            font-size: 16px;
            margin-left: 30px;
            margin-right: 0;
            margin-top: 2px;
            border-color: #919090;
            box-shadow: inset 0 0 5px rgba(0, 0, 0, 0.2);
        }
        .search-box:focus {
            /* Assottiglia il bordo blu quando la barra di ricerca ha il focus */
            outline: 1px solid #578aec;
        }

        .search-button {
            padding: 8px 16px;
            color:white ;
            background-color: #578aec;
            border: 1px solid #919090;
            border-left: none;
            border-radius: 0 30px 30px 0;
            cursor: pointer;
            font-size: 16px;
            margin-left: -6px;
        }

        .search-button:hover {
            background-color: #5775be;
            box-shadow: inset 0 0 5px rgba(0, 0, 0, 0.2);
        }

        .container-two{
            margin-right: 60px;
            margin-top: 40px;
            left: 0;
            margin-bottom: 50px;
            background-color: rgba(255, 131, 0, 0.89);
            background: linear-gradient(to top, rgba(255, 255, 255, 0), rgba(234, 168, 108, 0.53) 98%);
            width: 1150px;
            height: auto;
            border: none;
            border-radius: 30px;
            padding: 20px 20px 20px 20px;
            box-shadow: 1px 0 rgba(0, 0, 0, 0.5);
            text-align: left;
            position: absolute;
            z-index: -1;
        }

        .homepage-title{
            /* Impostazioni per il titolo della homepage */
            font-size: 52px;
            text-shadow: 1px 1px 1px rgba(0, 0, 0, 0.53);
            font-family: "Nanum Myeongjo", sans-serif;
            text-align: center;
            position: relative;
            margin-top: 50px;
            color: white;
        }

        .post-container{
            /* Impostazioni per i contenitori dei post */
            border-radius: 20px;
            background-color: white;
            width: 95%;
            height: auto;
            max-height: 200px;
            margin-top: 30px;
            margin-bottom: 30px;
            padding: 30px;
            margin-right: 20px;
            font-family: "Nanum Myeongjo", serif;
        }

        .dropdown-menu {
            /* Impostazioni per il menu a tendina dei suggerimenti */
            position: absolute;
            border: none;
            margin-top: -1px;
            width: 460px;
            margin-left: 360px;
        }
        .dropdown-menu ul {
            /* Impostazioni per la lista all'interno del menu a tendina dei suggerimenti */
            list-style-type: none;
            padding: 0;
            margin-top: 0;
            height: auto;
            overflow-y: auto;
            border: none;
            border-radius: 30px;
            background-color: rgba(255, 255, 255, 0.8);
            box-shadow: 0 0 rgba(0, 0, 0, 0.5);
        }

        .dropdown-menu li {
            /* Impostazioni per gli elementi della lista all'interno del menu a tendina dei suggerimenti */
            font-family: "Nanum Myeongjo", sans-serif;
            text-align: left;
            padding: 10px;
            cursor: pointer;
            transition: background-color 0.3s ease;
        }
        .dropdown-menu li:hover {
            /* Impostazioni quando il puntatore si trova sopra un elemento della lista del menu a tendina dei suggerimenti */
            background-color: white;
        }
    </style>

    <!-- Importiamo un font esterno dalla libreria Google Fonts -->
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Nanum+Myeongjo&display=swap" rel="stylesheet">

</head>

<body>
<div id="app" class="container">
    <button id="toggleFilterBtn" aria-expanded="false" aria-controls="menuFiltri" role="menu" aria-labelledby="toggleFilterBtn">Filtri</button>
    <div class="menu-filtri" id="menuFiltri"> <!-- Contenitore principale per i filtri -->
        <ul>
            <!-- Categoria "Sport" -->
            <li role="menuitem" @click="sendRequestToSpringBoot('Sport')">Sport
                <div class="menu-filtri-secondario" role="menu">
                    <ul>
                        <!-- Sottocategorie di "Sport" -->
                        <li role="menuitem" @click="sendRequestToSpringBoot('Calcio')">Calcio</li>
                        <li role="menuitem" @click="sendRequestToSpringBoot('Basket')">Basket</li>
                        <li role="menuitem" @click="sendRequestToSpringBoot('Tennis')">Tennis</li>
                        <li role="menuitem" @click="sendRequestToSpringBoot('Atletica')">Atletica</li>
                    </ul>
                </div>
            </li>
            <!-- Categoria "Cinema" -->
            <li role="menuitem" @click="sendRequestToSpringBoot('Cinema')">Cinema
                <div class="menu-filtri-secondario" role="menu">
                    <ul>
                        <!-- Sottocategorie di "Cinema" -->
                        <li role="menuitem" @click="sendRequestToSpringBoot('Commedia')">Commedia</li>
                        <li role="menuitem" @click="sendRequestToSpringBoot('Drammatico')">Drammatico</li>
                        <li role="menuitem" @click="sendRequestToSpringBoot('Horror')">Horror</li>
                        <li role="menuitem" @click="sendRequestToSpringBoot('Fantascienza')">Fantascienza</li>
                    </ul>
                </div>
            </li>
            <!-- Categoria "Teatro" -->
            <li role="menuitem" @click="sendRequestToSpringBoot('Teatro')" onmouseleave="keepSubMenu()">Teatro
                <div class="menu-filtri-secondario" role="menu">
                    <ul>
                        <!-- Sottocategorie di "Teatro" -->
                        <li role="menuitem" @click="sendRequestToSpringBoot('Commedia')">Commedia</li>
                        <li role="menuitem" @click="sendRequestToSpringBoot('Drammatico')">Drammatico</li>
                        <li role="menuitem" @click="sendRequestToSpringBoot('Musicale')">Musicale</li>
                    </ul>
                </div>
            </li>
            <!-- Categoria "Musica" -->
            <li role="menuitem" @click="sendRequestToSpringBoot('Musica')">Musica
                <div class="menu-filtri-secondario" role="menu">
                    <ul>
                        <!-- Sottocategorie di "Musica" -->
                        <li role="menuitem" @click="sendRequestToSpringBoot('Rock')">Rock</li>
                        <li role="menuitem" @click="sendRequestToSpringBoot('Pop')">Pop</li>
                        <li role="menuitem" @click="sendRequestToSpringBoot('Jazz')">Jazz</li>
                        <li role="menuitem" @click="sendRequestToSpringBoot('Classica')">Classica</li>
                    </ul>
                </div>
            </li>
        </ul>
    </div>

    <pre class="header-text"><b>Event Network</b></pre>

    <!-- Container per la barra di ricerca -->
    <div class="search-container">
        <form @submit.prevent="searchEvents" role="search">
            <!-- Input per inserire il testo di ricerca -->
            <input type="text" v-model="input" @input="filterItems" @keyup.enter="searchEvents" class="search-box" name="q" placeholder="Cerca evento..." aria-label="Cerca evento">
            <button @click="searchEvents" class="search-button" aria-label="Vai">Vai</button>
        </form>

        <!-- Dropdown menu per i suggerimenti di ricerca -->
        <div class="dropdown-menu" v-if="suggestions.length > 0" role="listbox" aria-label="Suggerimenti di ricerca">
            <ul>
                <!-- Iterazione attraverso i suggerimenti e creazione di un elemento per ciascun suggerimento -->
                <li v-for="suggestion in suggestions" :key="suggestion" @click="selectSuggestion(suggestion)" role="option>
                    {{ suggestion }} <!-- Testo del suggerimento -->
                </li>
            </ul>
        </div>
    </div>


    <div class="container-two"><h1 class="homepage-title"><b>H o m e p a g e</b></h1>
        <!-- Container per i risultati della ricerca -->
        <div class="post-container" v-show="filteredItems.length > 0 && !showSpringBootData" role="region" aria-live="polite">
            <h3>Risultati per: "{{ input }}"</h3>
            <ul>
                <li v-for="filter in filteredItems" :key="filter.id" role="listitem">
                    <h4>{{ filter.tipologia }}</h4>
                    <!--<p><strong>Url:</strong> {{ filter.url_image }}</p>-->
                    <p><strong>Nome evento:</strong> {{ filter.eventname }}</p>
                    <p><strong>Organizzatore:</strong> {{ filter.organizzatore }}</p>
                    <!--<p><strong>Sponsor:</strong> {{ filter.sponsor }}</p>-->
                    <p><strong>Luogo:</strong> {{ filter.luogo }}</p>
                    <p><strong>Data:</strong> {{ filter.data }}</p>
                    <p><strong>Descrizione:</strong> {{ filter.descrizione }}</p>
                </li>
            </ul>
        </div>
        <div class="spring-boot-data-container" v-show="springBootData.length > 0 && !showSearchResults" role="region" aria-live="polite">
            <ul>
                <li v-for="spring in springBootData" :key="spring.id" role="listitem">
                    <h4>{{ spring.tipologia }}</h4>
                    <!--<p><strong>Url:</strong> {{ spring.url_image }}</p>-->
                    <p><strong>Nome evento:</strong> {{ spring.eventname }}</p>
                    <p><strong>Organizzatore:</strong> {{ spring.organizzatore }}</p>
                    <!--<p><strong>Sponsor:</strong> {{ spring.sponsor }}</p>-->
                    <p><strong>Luogo:</strong> {{ spring.luogo }}</p>
                    <p><strong>Data:</strong> {{ spring.data }}</p>
                    <p><strong>Descrizione:</strong> {{ spring.descrizione }}</p>
                </li>
            </ul>
        </div>
    </div>
</div>


<p class="credits"><i>Watchdogs</i></p>

<script>
    // Assicura che il codice venga eseguito solo dopo che l'intero documento HTML è stato caricato
document.addEventListener("DOMContentLoaded", function () {
    // Ottiene il riferimento al pulsante di toggle dei filtri e al menu dei filtri
    const toggleFilterBtn = document.getElementById("toggleFilterBtn");
    const menuFiltri = document.querySelector(".menu-filtri");

    // Aggiunge un ascoltatore di eventi al pulsante di toggle dei filtri
    toggleFilterBtn.addEventListener("click", function () {
        // Alterna la classe 'show-menu' sul menu dei filtri per mostrare o nascondere il menu
        menuFiltri.classList.toggle("show-menu");
    });
});

// Ottiene i riferimenti al menu dei filtri principale e al suo submenu
const menuFiltri = document.querySelector('.menu-filtri');
const subMenu = document.querySelector('.menu-filtri-secondario');

// Aggiunge un ascoltatore di eventi per gestire l'evento mouseleave sul menu dei filtri principale
menuFiltri.addEventListener('mouseleave', function(event) {
    // Verifica se il submenu non deve rimanere aperto (non è stato impostato manualmente per mantenerlo aperto)
    if (!subMenu.dataset.keepOpen) {
        subMenu.style.display = 'none'; // Nasconde il submenu
    }
});

// Funzione per mostrare il submenu quando il mouse entra in un elemento del menu dei filtri
function showSubMenu(event) {
    const parentMenuItem = event.target.closest('.menu-filtri li'); // Ottieni l'elemento genitore più vicino con la classe 'menu-filtri li'
    const subMenu = parentMenuItem.querySelector('.menu-filtri-secondario'); // Ottieni il submenu relativo all'elemento genitore
    const parentMenuItemRect = parentMenuItem.getBoundingClientRect(); // Ottieni le dimensioni e la posizione dell'elemento genitore

    // Imposta la posizione del submenu a destra dell'elemento genitore
    subMenu.style.left = parentMenuItemRect.right + 'px';
    subMenu.style.top = parentMenuItem.offsetTop + 'px';

    subMenu.style.display = 'block'; // Mostra il submenu
}

// Funzione per nascondere il submenu
function hideSubMenu(event) {
    subMenu.style.display = 'none'; // Nasconde il submenu
}

// Funzione per mantenere il submenu aperto
function keepSubMenu() {
    subMenu.dataset.keepOpen = true; // Imposta l'attributo 'data-keepOpen' del submenu su 'true'
}

// Ottiene tutti gli elementi del menu dei filtri
const menuItems = document.querySelectorAll('.menu-filtri li');

// Aggiunge ascoltatori di eventi per gestire l'evento mouseenter e mouseleave su ciascun elemento del menu dei filtri
menuItems.forEach(item => {
item.addEventListener('mouseenter', function(event) {
    const subMenu = event.target.querySelector('.menu-filtri-secondario'); // Ottieni il submenu relativo all'elemento del menu principale
    subMenu.style.display = 'block'; // Mostra il submenu
});

// Nascondi il submenu quando il mouse esce dall'elemento del menu principale
item.addEventListener('mouseleave', function(event) {
    const subMenu = event.target.querySelector('.menu-filtri-secondario'); // Ottieni il submenu relativo all'elemento del menu principale
    subMenu.style.display = 'none'; // Nascondi il submenu
});
});


</script>
<script>
    // Funzione per mostrare/nascondere il menu a tendina in base alla categoria selezionata
function toggleDropdown(categoria) {
    var dropdown = document.getElementById('dropdown'); // Ottiene il riferimento all'elemento del menu a tendina tramite l'id 'dropdown'

    // Verifica se il menu a tendina è nascosto o se la categoria selezionata è diversa dalla categoria attualmente visualizzata
    if (dropdown.style.display === 'none' || dropdown.getAttribute('data-category') !== categoria) {
        dropdown.innerHTML = getCategoryItems(categoria); // Aggiorna il contenuto del menu a tendina con gli elementi della categoria selezionata
        dropdown.style.display = 'block'; // Mostra il menu a tendina impostando lo stile di visualizzazione su 'block'
        dropdown.setAttribute('data-category', categoria); // Imposta l'attributo 'data-category' sull'elemento del menu a tendina con la categoria selezionata
    } else {
        dropdown.style.display = 'none'; // Nasconde il menu a tendina impostando lo stile di visualizzazione su 'none'
    }
}

// Funzione per aggiornare dinamicamente l'altezza del body in base alla lunghezza della classe container-two
function updateBodyHeight() {
    const containerTwo = document.querySelector('.container-two');
    const body = document.querySelector('body');
    const height = containerTwo.offsetHeight; // Ottieni l'altezza del contenitore

    // Imposta l'altezza del body uguale all'altezza del contenitore
    body.style.height = height + 'px';
}

// Esegui la funzione di aggiornamento dell'altezza del body al caricamento della pagina
document.addEventListener('DOMContentLoaded', function () {
    updateBodyHeight();
});

</script>
<script src="https://cdn.jsdelivr.net/npm/vue@2"></script>
<script src="https://unpkg.com/axios/dist/axios.min.js"></script>
<script>

    new Vue({
    el: '#app', // Indica il punto di montaggio Vue.js all'interno del documento HTML con l'id 'app'

    data: {
        input: '', // Rappresenta l'input dell'utente nella barra di ricerca
        filteredItems: [], // Contiene gli elementi filtrati ottenuti dalla ricerca
        suggestions: [], // Array per memorizzare i suggerimenti durante la digitazione nella barra di ricerca
        springBootData: [] // Array per memorizzare i dati ottenuti da Spring Boot
        showSearchResults: false, // Boolean per determinare se mostrare i risultati della ricerca
        showSpringBootData: false // Boolean per determinare se mostrare i dati di Spring Boot
    },

    methods: {
        // Funzione per inviare una richiesta PUT a Spring Boot con la categoria selezionata
        sendRequestToSpringBoot(categoria) {
            axios.put('http://localhost:8080/api/', { categoria }) // Esegue una richiesta PUT a un endpoint specifico di Spring Boot
                .then(response => {
                    // Aggiorna l'array 'springBootData' con i dati ricevuti dalla risposta della richiesta
                    this.springBootData = response.data;
                    this.showSpringBootData = true; // Mostra i dati di Spring Boot
                    this.showSearchResults = false; // Nasconde i risultati della ricerca
                })
                .catch(error => {
                    console.error('Errore durante l\'invio della richiesta:', error); // Gestisce gli errori di rete o del server
                });
        },

        // Funzione per gestire la selezione di un suggerimento dalla barra di ricerca
        selectSuggestion(suggestion) {
            this.input = suggestion; // Assegna il suggerimento selezionato alla variabile 'input'
            this.suggestions = []; // Nasconde i suggerimenti dopo la selezione
            this.searchEvents(); // Avvia la ricerca basata sul suggerimento selezionato
        },

        // Funzione per filtrare gli elementi in base all'input dell'utente
        filterItems() {
            if (this.input.trim() === '') {
                this.suggestions = []; // Nasconde i suggerimenti se l'input è vuoto
            } else {
                const word = this.input.trim();
                axios.get('http://localhost:8080/search?word=' + word) // Esegue una richiesta GET per ottenere i suggerimenti
                    .then(response => {
                        this.suggestions = response.data; // Aggiorna l'array 'suggestions' con i suggerimenti ricevuti
                    })
                    .catch(error => {
                        console.error('Errore durante il recupero dei suggerimenti:', error); // Gestisce gli errori di rete o del server
                    });
            }
        },

        // Funzione per cercare gli eventi basati sull'input dell'utente
        searchEvents() {
            const word = this.input.trim();
            axios.get('http://localhost:8080/suggestion?word=' + word) // Esegue una richiesta GET per ottenere gli eventi
                .then(response => {
                    this.filteredItems = response.data; // Aggiorna l'array 'filteredItems' con gli eventi ottenuti dalla risposta
                    this.showSearchResults = true; // Mostra i risultati della ricerca
                    this.showSpringBootData = false; // Nasconde i dati di Spring Boot
                })
                .catch(error => {
                    console.error('Errore durante la ricerca degli eventi:', error); // Gestisce gli errori di rete o del server
                });
        },

        // Funzione per gestire la ricerca quando viene premuto il tasto Invio
        handleSearch() {
            this.suggestions = []; // Nasconde i suggerimenti quando viene avviata la ricerca
            this.searchEvents(); // Avvia la ricerca basata sull'input dell'utente
        }
    }
});

</script>

</body>
</html>
